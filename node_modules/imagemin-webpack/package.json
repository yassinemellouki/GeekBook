{
  "_from": "imagemin-webpack",
  "_id": "imagemin-webpack@4.1.0",
  "_inBundle": false,
  "_integrity": "sha512-HlTN5oz6kh41blPE3NNyEKgbL5ZuVa2lPNg5ebfmZRjfJnYiSwsHXLHbRnc/cwGjcGsaZhylleQRFJVuwEZjNw==",
  "_location": "/imagemin-webpack",
  "_phantomChildren": {
    "array-union": "1.0.2",
    "dir-glob": "2.0.0",
    "fast-glob": "2.2.6",
    "glob": "7.1.3",
    "ignore": "3.3.10",
    "p-pipe": "1.2.0",
    "pify": "4.0.1",
    "replace-ext": "1.0.0",
    "slash": "1.0.0"
  },
  "_requested": {
    "escapedName": "imagemin-webpack",
    "fetchSpec": "latest",
    "name": "imagemin-webpack",
    "raw": "imagemin-webpack",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/imagemin-webpack/-/imagemin-webpack-4.1.0.tgz",
  "_shasum": "e7fa496a08b9b5709c0c1580d94b936d273d8e1d",
  "_shrinkwrap": null,
  "_spec": "imagemin-webpack",
  "_where": "/Users/yassine/Desktop/GeekBook/Code",
  "author": {
    "email": "development@itgalaxy.company",
    "name": "Itgalaxy"
  },
  "babel": {
    "presets": [
      [
        "@babel/preset-env",
        {
          "targets": {
            "node": "6.9.0"
          },
          "useBuiltIns": "usage"
        }
      ]
    ]
  },
  "bugs": {
    "url": "https://github.com/itgalaxy/imagemin-webpack/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "cacache": "^11.0.1",
    "find-cache-dir": "^2.0.0",
    "imagemin": "^6.0.0",
    "loader-utils": "^1.0.0",
    "nodeify": "^1.0.0",
    "p-limit": "^2.1.0",
    "serialize-javascript": "^1.6.0",
    "webpack-sources": "^1.0.0"
  },
  "deprecated": false,
  "description": "Webpack loader and plugin to optimize (compress) images using imagemin",
  "devDependencies": {
    "@babel/cli": "^7.1.5",
    "@babel/core": "^7.1.6",
    "@babel/polyfill": "^7.0.0",
    "@babel/preset-env": "^7.1.6",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^23.6.0",
    "css-loader": "^2.1.0",
    "del": "^3.0.0",
    "eslint": "^5.8.0",
    "eslint-plugin-ava": "^5.1.1",
    "eslint-plugin-html": "^5.0.0",
    "eslint-plugin-import": "^2.14.0",
    "eslint-plugin-itgalaxy": "^97.0.1",
    "eslint-plugin-jest": "^22.0.0",
    "eslint-plugin-jsx-a11y": "^6.0.0",
    "eslint-plugin-lodash": "^5.1.0",
    "eslint-plugin-markdown": "^1.0.0",
    "eslint-plugin-node": "^8.0.0",
    "eslint-plugin-promise": "^4.0.1",
    "eslint-plugin-react": "^7.11.1",
    "eslint-plugin-unicorn": "^7.1.0",
    "file-loader": "^3.0.1",
    "husky": "^1.1.2",
    "imagemin-gifsicle": "^6.0.1",
    "imagemin-mozjpeg": "^8.0.0",
    "imagemin-pngquant": "^7.0.0",
    "imagemin-svgo": "^7.0.0",
    "jest": "^23.6.0",
    "lint-staged": "^8.0.4",
    "lodash.defaultsdeep": "^4.6.0",
    "mini-css-extract-plugin": "^0.5.0",
    "npm-run-all": "^4.0.0",
    "npmpub": "^4.0.1",
    "pify": "^4.0.1",
    "prettier": "^1.5.2",
    "remark-cli": "^6.0.0",
    "remark-preset-lint-itgalaxy": "^13.0.0",
    "tempy": "^0.2.0",
    "url-loader": "^1.0.1",
    "webpack": "^4.29.0"
  },
  "engines": {
    "node": ">= 6.9.0"
  },
  "eslintConfig": {
    "extends": [
      "plugin:itgalaxy/esnext",
      "plugin:itgalaxy/jest",
      "plugin:itgalaxy/markdown",
      "plugin:itgalaxy/node"
    ],
    "overrides": [
      {
        "files": [
          "**/__tests__/**/*.js"
        ],
        "parserOptions": {
          "sourceType": "module"
        },
        "rules": {
          "node/no-unsupported-features/es-syntax": "off"
        }
      },
      {
        "files": [
          "**/*.md"
        ],
        "parserOptions": {
          "ecmaFeatures": {
            "impliedStrict": true
          }
        },
        "rules": {
          "strict": "off",
          "no-undef": "off",
          "no-unused-vars": "off",
          "no-process-env": "off",
          "no-process-exit": "off",
          "no-console": "off",
          "import/no-unresolved": "off",
          "node/no-unpublished-require": "off"
        }
      }
    ],
    "parserOptions": {
      "sourceType": "script"
    },
    "root": true,
    "rules": {
      "import/no-unresolved": [
        {
          "ignore": [
            "imagemin-webpack"
          ]
        },
        "error"
      ],
      "node/no-unpublished-require": [
        {
          "allowModules": [
            "imagemin-gifsicle",
            "imagemin-svgo"
          ]
        },
        "error"
      ]
    }
  },
  "files": [
    "src"
  ],
  "homepage": "https://github.com/itgalaxy/imagemin-webpack",
  "jest": {
    "testPathIgnorePatterns": [
      "/fixtures/",
      "/node_modules/",
      "helpers.js"
    ]
  },
  "keywords": [
    "compress",
    "imagemin",
    "images",
    "loader",
    "minify",
    "optimize",
    "plugin",
    "webpack"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "imagemin-webpack",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^4.0.0"
  },
  "readme": "# imagemin-webpack\n\n[![NPM version](https://img.shields.io/npm/v/imagemin-webpack.svg)](https://www.npmjs.org/package/imagemin-webpack)\n[![Travis Build Status](https://img.shields.io/travis/itgalaxy/imagemin-webpack/master.svg?label=build)](https://travis-ci.org/itgalaxy/imagemin-webpack)\n[![dependencies Status](https://david-dm.org/itgalaxy/imagemin-webpack/status.svg)](https://david-dm.org/itgalaxy/imagemin-webpack)\n[![devDependencies Status](https://david-dm.org/itgalaxy/imagemin-webpack/dev-status.svg)](https://david-dm.org/itgalaxy/imagemin-webpack?type=dev)\n[![peerDependencies Status](https://david-dm.org/itgalaxy/imagemin-webpack/peer-status.svg)](https://david-dm.org/itgalaxy/imagemin-webpack?type=peer)\n[![Greenkeeper badge](https://badges.greenkeeper.io/itgalaxy/imagemin-webpack.svg)](https://greenkeeper.io)\n\n<!--lint disable no-html-->\n\n<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" hspace=\"10\"\n      src=\"https://cdn.rawgit.com/webpack/media/e7485eb2/logo/icon.svg\">\n  </a>\n  <h1>Imagemin Webpack</h1>\n  <p>\n    Plugin and Loader for <a href=\"http://webpack.js.org/\">webpack</a> to optimize (compress) all images using <a href=\"https://github.com/imagemin/imagemin\">imagemin</a>.\n    Do not worry about size of images, now they are always optimized/compressed.\n  </p>\n</div>\n\n<!--lint enable no-html-->\n\n## Why\n\n- No extra dependencies (`imagemin-gifsicle`, `imagemin-pngquant`) in `dependencies` section into `package.json`.\n  You decide for yourself what plugins to use.\n\n- This loader and plugin will optimize ANY images regardless of how they were added to webpack.\n  `image-webpack-loader` don't optimize some images generating `favicons-webpack-plugin` or `copy-webpack-plugin`.\n  `ImageminWebpackPlugin` don't optimize inlined images with `url-loader`.\n\n- Images optimized when inlined with `url-loader` or `svg-url-loader`. This can't be done with `imagemin-webpack-plugin`.\n\n- Throttle asynchronous images optimization (using `maxConcurrency` plugin option).\n  This allows you to not overload a server when building.\n\n- All tested.\n\n- Persistent cache.\n\n- (Optional) Don't crash building process if your have corrupted image(s).\n\n## Install\n\n```shell\nnpm install imagemin-webpack --save-dev\n```\n\n### Optionals\n\nImages can be optimized in two modes:\n\n1.  [Lossless](https://en.wikipedia.org/wiki/Lossless_compression) (without loss of quality).\n2.  [Lossy](https://en.wikipedia.org/wiki/Lossy_compression) (with loss of quality).\n\nNote:\n\n- [imagemin-mozjpeg](https://github.com/imagemin/imagemin-mozjpeg) can be configured in lossless and lossy mode.\n- [imagemin-svgo](https://github.com/imagemin/imagemin-svgo) can be configured in lossless and lossy mode.\n\nExplore the options to get the best result for you.\n\n**Recommended basic imagemin plugins for lossless optimization**\n\n```shell\nnpm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo --save-dev\n```\n\n**Recommended basic imagemin plugins for lossy optimization**\n\n```shell\nnpm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo --save-dev\n```\n\n### Basic\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\n\n// Before importing imagemin plugin make sure you add it in `package.json` (`dependencies`) and install\nconst imageminGifsicle = require(\"imagemin-gifsicle\");\nconst imageminJpegtran = require(\"imagemin-jpegtran\");\nconst imageminOptipng = require(\"imagemin-optipng\");\nconst imageminSvgo = require(\"imagemin-svgo\");\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(jpe?g|png|gif|svg)$/i,\n        use: [\n          {\n            loader: \"file-loader\" // Or `url-loader` or your other loader\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    // Make sure that the plugin is after any plugins that add images, example `CopyWebpackPlugin`\n    new ImageminPlugin({\n      bail: false, // Ignore errors on corrupted images\n      cache: true,\n      imageminOptions: {\n        // Lossless optimization with custom option\n        // Feel free to experement with options for better result for you\n        plugins: [\n          imageminGifsicle({\n            interlaced: true\n          }),\n          imageminJpegtran({\n            progressive: true\n          }),\n          imageminOptipng({\n            optimizationLevel: 5\n          }),\n          imageminSvgo({\n            removeViewBox: true\n          })\n        ]\n      }\n    })\n  ]\n};\n```\n\nNote: **If you want to use `loader` or `plugin` standalone see sections below, but this is not recommended**.\n\nNote: **Make sure that plugin place after any plugins that add images or other assets which you want to optimized.**\n\n### Standalone Loader\n\n[Documentation: Using loaders](https://webpack.js.org/concepts/loaders/)\n\nIn your `webpack.config.js`, add the `ImageminPlugin.loader`,\nchained with the [file-loader](https://github.com/webpack/file-loader)\nor [url-loader](https://github.com/webpack-contrib/url-loader):\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\nconst imageminGifsicle = require(\"imagemin-gifsicle\");\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(jpe?g|png|gif|svg)$/i,\n        use: [\n          {\n            loader: \"file-loader\" // Or `url-loader` or your other loader\n          },\n          {\n            loader: ImageminPlugin.loader,\n            options: {\n              bail: false, // Ignore errors on corrupted images\n              cache: true,\n              imageminOptions: {\n                plugins: [imageminGifsicle()]\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n};\n```\n\n### Standalone Plugin\n\n[Documentation: Using plugins](https://webpack.js.org/concepts/plugins/)\n\n**webpack.config.js**\n\n```js\nconst ImageminWebpack = require(\"imagemin-webpack\");\nconst imageminGifsicle = require(\"imagemin-gifsicle\");\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        loader: \"file-loader\",\n        options: {\n          emitFile: true, // Don't forget emit images\n          name: \"[path][name].[ext]\"\n        },\n        test: /\\.(jpe?g|png|gif|svg)$/i\n      }\n    ]\n  },\n  plugins: [\n    // Make sure that the plugin is after any plugins that add images\n    new ImageminWebpack({\n      bail: false, // Ignore errors on corrupted images\n      cache: true,\n      imageminOptions: {\n        plugins: [imageminGifsicle()]\n      },\n      // Disable `loader`\n      loader: false\n    })\n  ]\n};\n```\n\n## Options\n\n### Plugin Options\n\n<!--lint disable no-html-->\n\n|         Name          |                   Type                    |                  Default                   | Description                                                                                                               |\n| :-------------------: | :---------------------------------------: | :----------------------------------------: | :------------------------------------------------------------------------------------------------------------------------ |\n|      **`test`**       | `{String\\/RegExp\\|Array<String\\|RegExp>}` | <code>/\\.(jpe?g\\|png\\|gif\\|svg)\\$/i</code> | Test to match files against                                                                                               |\n|     **`include`**     | `{String\\/RegExp\\|Array<String\\|RegExp>}` |                `undefined`                 | Files to `include`                                                                                                        |\n|     **`exclude`**     | `{String\\/RegExp\\|Array<String\\|RegExp>}` |                `undefined`                 | Files to `exclude`                                                                                                        |\n|     **`filter`**      |               `{Function}`                |                `() => true`                | Allows filtering of images for optimization                                                                               |\n|      **`cache`**      |            `{Boolean\\|String}`            |                  `false`                   | Enable file caching                                                                                                       |\n|      **`bail`**       |                `{Boolean}`                |          `compiler.options.bail`           | Emit warnings instead errors                                                                                              |\n| **`imageminOptions`** |                `{Object}`                 |             `{ plugins: [] }`              | Options for `imagemin`                                                                                                    |\n|     **`loader`**      |                `{Boolean}`                |                   `true`                   | Automatically adding `imagemin-loader` (require for minification images using in `url-loader`, `svg-url-loader` or other) |\n| **`maxConcurrency`**  |                `{Number}`                 |    `Math.max(1, os.cpus().length - 1)`     | Maximum number of concurrency optimization processes in one time                                                          |\n|      **`name`**       |                `{String}`                 |               `[hash].[ext]`               | The target asset name                                                                                                     |\n|    **`manifest`**     |                `{Object}`                 |                `undefined`                 | Contain optimized list of images from other plugins                                                                       |\n\n<!--lint enable no-html-->\n\n#### `test`\n\nTest to match files against.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\n\nmodule.exports = {\n  plugins: [\n    new ImageminPlugin({\n      test: /\\.(jpe?g|png|gif|svg)$/i\n    })\n  ]\n};\n```\n\n#### `include`\n\nFiles to include.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\n\nmodule.exports = {\n  plugins: [\n    new ImageminPlugin({\n      include: /\\/includes/\n    })\n  ]\n};\n```\n\n#### `exclude`\n\nFiles to exclude.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\n\nmodule.exports = {\n  plugins: [\n    new ImageminPlugin({\n      exclude: /\\/excludes/\n    })\n  ]\n};\n```\n\n#### `filter`\n\nAllows filtering of images for optimization.\n\nReturn `true` to optimize the image, `false` otherwise.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\n\nmodule.exports = {\n  plugins: [\n    new ImageminPlugin({\n      filter: (source, sourcePath) => {\n        // The `source` argument is a `Buffer` of source file\n        // The `sourcePath` argument is an absolute path to source\n        if (source.byteLength < 8192) {\n          return false;\n        }\n\n        return true;\n      }\n    })\n  ]\n};\n```\n\n#### `cache`\n\nEnable file caching. Default path to cache directory: `node_modules/.cache/imagemin-webpack`.\n\n**Be careful** when your enable `cache` and change options for imagemin plugin (example for `imagemin-gifsicle`) you should remove cache manually.\n\nYou can use `rm -rf ./node_modules/.cache/imagemin-webpack` command. This is due to the fact that `imagemin-plugin` is `Function` and we don't know her arguments to invalidate cache.\n\nNote: if somebody know how we can fix it PR welcome!\n\n##### `{Boolean}`\n\nEnable/disable file caching.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\n\nmodule.exports = {\n  plugins: [\n    new ImageminPlugin({\n      cache: true\n    })\n  ]\n};\n```\n\n##### `{String}`\n\nEnable file caching and set path to cache directory.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\n\nmodule.exports = {\n  plugins: [\n    new ImageminPlugin({\n      cache: \"path/to/cache\"\n    })\n  ]\n};\n```\n\n#### `bail`\n\nEmit warnings instead errors.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\n\nmodule.exports = {\n  plugins: [\n    new ImageminPlugin({\n      bail: true\n    })\n  ]\n};\n```\n\n#### `imageminOptions`\n\nOptions for `imagemin`.\n\nMore information and examples [here](https://github.com/imagemin/imagemin).\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\nconst imageminGifsicle = require(\"imagemin-gifsicle\");\n\nmodule.exports = {\n  plugins: [\n    new ImageminPlugin({\n      imageminOptions: {\n        plugins: [\n          imageminGifsicle({\n            interlaced: true,\n            optimizationLevel: 3\n          })\n        ]\n      }\n    })\n  ]\n};\n```\n\n#### `maxConcurrency`\n\nMaximum number of concurrency optimization processes in one time.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\n\nmodule.exports = {\n  plugins: [\n    new ImageminPlugin({\n      maxConcurrency: 3\n    })\n  ]\n};\n```\n\n#### `name`\n\nThe target asset name.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\n\nmodule.exports = {\n  plugins: [\n    new ImageminPlugin({\n      name: \"[hash]-compressed.[ext]\"\n    })\n  ]\n};\n```\n\n#### `manifest`\n\nContain optimized list of images from other plugins.\n\nNote: contains only assets compressed by plugin.\nNote: Manifest will be contain list of optimized images only after `emit` event.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\nconst ManifestPlugin = require(\"manifest-webpack-plugin\");\nconst manifest = {};\n\nmodule.exports = {\n  plugins: [\n    new ImageminPlugin({\n      manifest\n    }),\n    new ManifestPlugin({\n      // Contain compressed images\n      manifest\n    })\n  ]\n};\n```\n\n### Loader Options\n\n|         Name          |        Type         |         Default         | Description                                 |\n| :-------------------: | :-----------------: | :---------------------: | :------------------------------------------ |\n|     **`filter`**      |    `{Function}`     |       `undefined`       | Allows filtering of images for optimization |\n|      **`cache`**      | `{Boolean\\|String}` |         `false`         | Enable file caching                         |\n|      **`bail`**       |     `{Boolean}`     | `compiler.options.bail` | Emit warnings instead errors                |\n| **`imageminOptions`** |     `{Object}`      |    `{ plugins: [] }`    | Options for `imagemin`                      |\n\n#### `filter`\n\nAllows filtering of images for optimization.\n\nReturn `true` to optimize the image, `false` otherwise.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\nconst imageminGifsicle = require(\"imagemin-gifsicle\");\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(jpe?g|png|gif|svg)$/i,\n        use: [\n          {\n            loader: \"file-loader\" // Or `url-loader` or your other loader\n          },\n          {\n            loader: ImageminPlugin.loader,\n            options: {\n              cache: true,\n              filter: (source, sourcePath) => {\n                // The `source` argument is a `Buffer` of source file\n                // The `sourcePath` argument is an absolute path to source\n                if (source.byteLength < 8192) {\n                  return false;\n                }\n\n                return true;\n              },\n              imageminOptions: {\n                plugins: [imageminGifsicle()]\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n};\n```\n\n#### `cache`\n\nEnable file caching. Default path to cache directory: `node_modules/.cache/imagemin-webpack`.\n\n##### `{Boolean}`\n\nEnable/disable file caching.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\nconst imageminGifsicle = require(\"imagemin-gifsicle\");\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(jpe?g|png|gif|svg)$/i,\n        use: [\n          {\n            loader: \"file-loader\" // Or `url-loader` or your other loader\n          },\n          {\n            loader: ImageminPlugin.loader,\n            options: {\n              cache: true,\n              imageminOptions: {\n                plugins: [imageminGifsicle()]\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n};\n```\n\n##### `{String}`\n\nEnable file caching and set path to cache directory.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\nconst imageminGifsicle = require(\"imagemin-gifsicle\");\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(jpe?g|png|gif|svg)$/i,\n        use: [\n          {\n            loader: \"file-loader\" // Or `url-loader` or your other loader\n          },\n          {\n            loader: ImageminPlugin.loader,\n            options: {\n              cache: \"path/to/cache\",\n              imageminOptions: {\n                plugins: [imageminGifsicle()]\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n};\n```\n\n#### `bail`\n\nEmit warnings instead errors.\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\nconst imageminGifsicle = require(\"imagemin-gifsicle\");\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(jpe?g|png|gif|svg)$/i,\n        use: [\n          {\n            loader: \"file-loader\" // Or `url-loader` or your other loader\n          },\n          {\n            loader: ImageminPlugin.loader,\n            options: {\n              bail: true,\n              imageminOptions: {\n                plugins: [imageminGifsicle()]\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n};\n```\n\n#### `imageminOptions`\n\nOptions for `imagemin`.\n\nMore information and examples [here](https://github.com/imagemin/imagemin).\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\nconst imageminGifsicle = require(\"imagemin-gifsicle\");\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(jpe?g|png|gif|svg)$/i,\n        use: [\n          {\n            loader: \"file-loader\" // Or `url-loader` or your other loader\n          },\n          {\n            loader: ImageminPlugin.loader,\n            options: {\n              bail: true,\n              imageminOptions: {\n                plugins: [\n                  imageminGifsicle({\n                    interlaced: true,\n                    optimizationLevel: 3\n                  })\n                ]\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n};\n```\n\n## Examples\n\n### Optimize images based on size\n\nYou can use difference options (like `progressive`/`interlaced` and etc) based on image size (example - don't do progressive transformation for small images).\n\nWhat is `progressive` image? [`Answer here`](https://jmperezperez.com/medium-image-progressive-loading-placeholder/).\n\n**webpack.config.js**\n\n```js\nconst ImageminPlugin = require(\"imagemin-webpack\");\nconst imageminJpegtran = require(\"imagemin-jpegtran\");\n\nmodule.exports = {\n  minimizer: [\n    new ImageminPlugin({\n      // Only apply this one to files equal to or over 8192 bytes\n      filter: source => {\n        if (source.byteLength >= 8192) {\n          return true;\n        }\n\n        return false;\n      },\n      imageminOptions: {\n        plugins: [\n          imageminJpegtran({\n            progressive: true\n          })\n        ]\n      }\n    }),\n    new ImageminPlugin({\n      // Only apply this one to files under 8192\n      filter: source => {\n        if (source.byteLength < 8192) {\n          return true;\n        }\n\n        return false;\n      },\n      imageminOptions: {\n        plugins: [\n          imageminJpegtran({\n            progressive: false\n          })\n        ]\n      }\n    })\n  ]\n};\n```\n\n## Related\n\n- [imagemin](https://github.com/imagemin/imagemin) - API for this package.\n- [image-webpack-loader](https://github.com/tcoopman/image-webpack-loader) - inspiration, thanks.\n- [imagemin-webpack-plugin](https://github.com/Klathmon/imagemin-webpack-plugin) - inspiration, thanks.\n\n## Contribution\n\nFeel free to push your code if you agree with publishing under the MIT license.\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README.md",
  "remarkConfig": {
    "plugins": [
      "remark-preset-lint-itgalaxy"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/itgalaxy/imagemin-webpack.git"
  },
  "scripts": {
    "fix": "npm-run-all -l prettify -p 'fix:**'",
    "fix:js": "npm run lint:script -- --fix",
    "lint": "npm-run-all -l -p 'lint:**'",
    "lint:js": "eslint . --cache --report-unused-disable-directives --ignore-path .gitignore --ext 'js,.mjs,.jsx,.md'",
    "lint:md": "remark . LICENSE -f -q -i .gitignore",
    "lint:prettify": "prettier --list-different '{**/*,*}.{js,mjs,jsx,json,md}' --ignore-path .gitignore",
    "pretest": "npm run lint",
    "prettify": "npm run lint:prettify -- --write",
    "release": "npmpub",
    "test": "npm run test-only",
    "test-only": "jest --coverage --runInBand"
  },
  "version": "4.1.0"
}
