{"version":3,"file":"react-svg.development.js","sources":["../node_modules/@babel/runtime/helpers/extends.js","../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","../node_modules/@babel/runtime/helpers/inheritsLoose.js","../node_modules/@tanem/svg-injector/src/clone-svg.ts","../node_modules/@tanem/svg-injector/src/is-local.ts","../node_modules/@tanem/svg-injector/src/svg-cache.ts","../node_modules/@tanem/svg-injector/src/request-queue.ts","../node_modules/@tanem/svg-injector/src/load-svg.ts","../node_modules/@tanem/svg-injector/src/unique-id.ts","../node_modules/@tanem/svg-injector/src/inject-element.ts","../node_modules/@tanem/svg-injector/src/svg-injector.ts","../src/shallow-differs.ts","../src/index.tsx"],"sourcesContent":["function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nmodule.exports = _inheritsLoose;","const cloneSvg = (sourceSvg: HTMLElement | SVGSVGElement) =>\n  sourceSvg.cloneNode(true) as Element\n\nexport default cloneSvg\n","const isLocal = () => window.location.protocol === 'file:'\n\nexport default isLocal\n","const svgCache = new Map<\n  string,\n  HTMLElement | SVGSVGElement | Error | undefined\n>()\n\nexport default svgCache\n","import cloneSvg from './clone-svg'\nimport svgCache from './svg-cache'\nimport { Errback } from './types'\n\nlet requestQueue: { [key: string]: Errback[] } = {}\n\nexport const clear = () => {\n  requestQueue = {}\n}\n\nexport const queueRequest = (url: string, callback: Errback) => {\n  requestQueue[url] = requestQueue[url] || []\n  requestQueue[url].push(callback)\n}\n\nexport const processRequestQueue = (url: string) => {\n  for (let i = 0, len = requestQueue[url].length; i < len; i++) {\n    // Make these calls async so we avoid blocking the page/renderer.\n    setTimeout(() => {\n      /* istanbul ignore else */\n      if (Array.isArray(requestQueue[url])) {\n        const cacheValue = svgCache.get(url)\n        const callback = requestQueue[url][i]\n\n        /* istanbul ignore else */\n        if (\n          cacheValue instanceof SVGSVGElement ||\n          cacheValue instanceof HTMLElement\n        ) {\n          callback(null, cloneSvg(cacheValue))\n        }\n\n        /* istanbul ignore else */\n        if (cacheValue instanceof Error) {\n          callback(cacheValue)\n        }\n\n        /* istanbul ignore else */\n        if (i === requestQueue[url].length - 1) {\n          delete requestQueue[url]\n        }\n      }\n    }, 0)\n  }\n}\n","import cloneSvg from './clone-svg'\nimport isLocal from './is-local'\nimport { processRequestQueue, queueRequest } from './request-queue'\nimport svgCache from './svg-cache'\nimport { Errback } from './types'\n\nconst loadSvg = (url: string, callback: Errback) => {\n  if (svgCache.has(url)) {\n    const cacheValue = svgCache.get(url)\n\n    if (\n      cacheValue instanceof SVGSVGElement ||\n      cacheValue instanceof HTMLElement\n    ) {\n      callback(null, cloneSvg(cacheValue))\n      return\n    }\n\n    if (cacheValue instanceof Error) {\n      callback(cacheValue)\n      return\n    }\n\n    queueRequest(url, callback)\n\n    return\n  }\n\n  // Seed the cache to indicate we are loading this URL.\n  svgCache.set(url, undefined)\n  queueRequest(url, callback)\n\n  const httpRequest = new XMLHttpRequest()\n\n  httpRequest.onreadystatechange = () => {\n    try {\n      if (httpRequest.readyState === 4) {\n        if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n          throw new Error(\n            isLocal()\n              ? 'Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver.'\n              : 'Unable to load SVG file: ' + url\n          )\n        }\n\n        if (\n          httpRequest.status === 200 ||\n          (isLocal() && httpRequest.status === 0)\n        ) {\n          /* istanbul ignore else */\n          if (httpRequest.responseXML instanceof Document) {\n            /* istanbul ignore else */\n            if (httpRequest.responseXML.documentElement) {\n              svgCache.set(url, httpRequest.responseXML.documentElement)\n            }\n          }\n          processRequestQueue(url)\n        } else {\n          throw new Error(\n            'There was a problem injecting the SVG: ' +\n              httpRequest.status +\n              ' ' +\n              httpRequest.statusText\n          )\n        }\n      }\n    } catch (error) {\n      svgCache.set(url, error)\n      processRequestQueue(url)\n    }\n  }\n\n  httpRequest.open('GET', url)\n\n  // Treat and parse the response as XML, even if the server sends us a\n  // different mimetype.\n  /* istanbul ignore else */\n  if (httpRequest.overrideMimeType) {\n    httpRequest.overrideMimeType('text/xml')\n  }\n\n  httpRequest.send()\n}\n\nexport default loadSvg\n","let idCounter = 0\nconst uniqueId = () => ++idCounter\nexport default uniqueId\n","import loadSvg from './load-svg'\nimport { Errback, EvalScripts } from './types'\nimport uniqueId from './unique-id'\n\ntype ElementType = Element | HTMLElement | null\n\nconst injectedElements: ElementType[] = []\nconst ranScripts: { [key: string]: boolean } = {}\nconst svgNamespace = 'http://www.w3.org/2000/svg'\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink'\n\nconst injectElement = (\n  el: NonNullable<ElementType>,\n  callback: Errback,\n  {\n    evalScripts,\n    renumerateIRIElements\n  }: { evalScripts: EvalScripts; renumerateIRIElements: boolean }\n) => {\n  const imgUrl = el.getAttribute('data-src') || el.getAttribute('src')\n\n  /* istanbul ignore else */\n  if (!imgUrl || !/\\.svg/i.test(imgUrl)) {\n    callback(\n      new Error(\n        'Attempted to inject a file with a non-svg extension: ' + imgUrl\n      )\n    )\n    return\n  }\n\n  // Make sure we aren't already in the process of injecting this element to\n  // avoid a race condition if multiple injections for the same element are run.\n  // :NOTE: Using indexOf() only _after_ we check for SVG support and bail, so\n  // no need for IE8 indexOf() polyfill.\n  /* istanbul ignore else */\n  if (injectedElements.indexOf(el) !== -1) {\n    // TODO: Extract.\n    injectedElements.splice(injectedElements.indexOf(el), 1)\n    ;(el as ElementType) = null\n    return\n  }\n\n  // Remember the request to inject this element, in case other injection calls\n  // are also trying to replace this element before we finish.\n  injectedElements.push(el)\n\n  // Try to avoid loading the orginal image src if possible.\n  el.setAttribute('src', '')\n\n  loadSvg(imgUrl, (error, svg) => {\n    /* istanbul ignore else */\n    if (!svg) {\n      // TODO: Extract.\n      injectedElements.splice(injectedElements.indexOf(el), 1)\n      ;(el as ElementType) = null\n      callback(error)\n      return\n    }\n\n    const imgId = el.getAttribute('id')\n    /* istanbul ignore else */\n    if (imgId) {\n      svg.setAttribute('id', imgId)\n    }\n\n    const imgTitle = el.getAttribute('title')\n    /* istanbul ignore else */\n    if (imgTitle) {\n      svg.setAttribute('title', imgTitle)\n    }\n\n    const imgWidth = el.getAttribute('width')\n    /* istanbul ignore else */\n    if (imgWidth) {\n      svg.setAttribute('width', imgWidth)\n    }\n\n    const imgHeight = el.getAttribute('height')\n    /* istanbul ignore else */\n    if (imgHeight) {\n      svg.setAttribute('height', imgHeight)\n    }\n\n    const mergedClasses = Array.from(\n      new Set([\n        ...(svg.getAttribute('class') || '').split(' '),\n        'injected-svg',\n        ...(el.getAttribute('class') || '').split(' ')\n      ])\n    )\n      .join(' ')\n      .trim()\n    svg.setAttribute('class', mergedClasses)\n\n    const imgStyle = el.getAttribute('style')\n    /* istanbul ignore else */\n    if (imgStyle) {\n      svg.setAttribute('style', imgStyle)\n    }\n\n    svg.setAttribute('data-src', imgUrl)\n\n    // Copy all the data elements to the svg.\n    const imgData = [].filter.call(el.attributes, (at: Attr) => {\n      return /^data-\\w[\\w-]*$/.test(at.name)\n    })\n\n    Array.prototype.forEach.call(imgData, (dataAttr: Attr) => {\n      /* istanbul ignore else */\n      if (dataAttr.name && dataAttr.value) {\n        svg.setAttribute(dataAttr.name, dataAttr.value)\n      }\n    })\n\n    /* istanbul ignore else */\n    if (renumerateIRIElements) {\n      // Make sure any internally referenced clipPath ids and their clip-path\n      // references are unique.\n      //\n      // This addresses the issue of having multiple instances of the same SVG\n      // on a page and only the first clipPath id is referenced.\n      //\n      // Browsers often shortcut the SVG Spec and don't use clipPaths contained\n      // in parent elements that are hidden, so if you hide the first SVG\n      // instance on the page, then all other instances lose their clipping.\n      // Reference: https://bugzilla.mozilla.org/show_bug.cgi?id=376027\n\n      // Handle all defs elements that have iri capable attributes as defined by\n      // w3c: http://www.w3.org/TR/SVG/linking.html#processingIRI. Mapping IRI\n      // addressable elements to the properties that can reference them.\n      const iriElementsAndProperties: { [key: string]: string[] } = {\n        clipPath: ['clip-path'],\n        'color-profile': ['color-profile'],\n        cursor: ['cursor'],\n        filter: ['filter'],\n        linearGradient: ['fill', 'stroke'],\n        marker: ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        mask: ['mask'],\n        path: [],\n        pattern: ['fill', 'stroke'],\n        radialGradient: ['fill', 'stroke']\n      }\n\n      let element\n      let elements\n      let properties\n      let currentId: string\n      let newId: string\n\n      Object.keys(iriElementsAndProperties).forEach(key => {\n        element = key\n        properties = iriElementsAndProperties[key]\n\n        elements = svg.querySelectorAll(element + '[id]')\n        for (let a = 0, elementsLen = elements.length; a < elementsLen; a++) {\n          currentId = elements[a].id\n          newId = currentId + '-' + uniqueId()\n\n          // All of the properties that can reference this element type.\n          let referencingElements\n          Array.prototype.forEach.call(properties, (property: string) => {\n            // :NOTE: using a substring match attr selector here to deal with IE\n            // \"adding extra quotes in url() attrs\".\n            referencingElements = svg.querySelectorAll(\n              '[' + property + '*=\"' + currentId + '\"]'\n            )\n            for (\n              let b = 0, referencingElementLen = referencingElements.length;\n              b < referencingElementLen;\n              b++\n            ) {\n              const attrValue: string | null = referencingElements[\n                b\n              ].getAttribute(property)\n              if (\n                attrValue &&\n                !attrValue.match(new RegExp('url\\\\(#' + currentId + '\\\\)'))\n              ) {\n                continue\n              }\n              referencingElements[b].setAttribute(\n                property,\n                'url(#' + newId + ')'\n              )\n            }\n          })\n\n          const allLinks = svg.querySelectorAll('[*|href]')\n          const links = []\n          for (let c = 0, allLinksLen = allLinks.length; c < allLinksLen; c++) {\n            const href = allLinks[c].getAttributeNS(xlinkNamespace, 'href')\n            /* istanbul ignore else */\n            if (href && href.toString() === '#' + elements[a].id) {\n              links.push(allLinks[c])\n            }\n          }\n          for (let d = 0, linksLen = links.length; d < linksLen; d++) {\n            links[d].setAttributeNS(xlinkNamespace, 'href', '#' + newId)\n          }\n\n          elements[a].id = newId\n        }\n      })\n    }\n\n    // Remove any unwanted/invalid namespaces that might have been added by SVG\n    // editing tools.\n    svg.removeAttribute('xmlns:a')\n\n    // Post page load injected SVGs don't automatically have their script\n    // elements run, so we'll need to make that happen, if requested.\n\n    // Find then prune the scripts.\n    const scripts = svg.querySelectorAll('script')\n    const scriptsToEval: string[] = []\n    let script\n    let scriptType\n\n    for (let i = 0, scriptsLen = scripts.length; i < scriptsLen; i++) {\n      scriptType = scripts[i].getAttribute('type')\n\n      // Only process javascript types. SVG defaults to 'application/ecmascript'\n      // for unset types.\n      /* istanbul ignore else */\n      if (\n        !scriptType ||\n        scriptType === 'application/ecmascript' ||\n        scriptType === 'application/javascript' ||\n        scriptType === 'text/javascript'\n      ) {\n        // innerText for IE, textContent for other browsers.\n        script = scripts[i].innerText || scripts[i].textContent\n\n        // Stash.\n        /* istanbul ignore else */\n        if (script) {\n          scriptsToEval.push(script)\n        }\n\n        // Tidy up and remove the script element since we don't need it anymore.\n        svg.removeChild(scripts[i])\n      }\n    }\n\n    // Run/Eval the scripts if needed.\n    /* istanbul ignore else */\n    if (\n      scriptsToEval.length > 0 &&\n      (evalScripts === 'always' ||\n        (evalScripts === 'once' && !ranScripts[imgUrl]))\n    ) {\n      for (\n        let l = 0, scriptsToEvalLen = scriptsToEval.length;\n        l < scriptsToEvalLen;\n        l++\n      ) {\n        // :NOTE: Yup, this is a form of eval, but it is being used to eval code\n        // the caller has explictely asked to be loaded, and the code is in a\n        // caller defined SVG file... not raw user input.\n        //\n        // Also, the code is evaluated in a closure and not in the global scope.\n        // If you need to put something in global scope, use 'window'.\n        new Function(scriptsToEval[l])(window)\n      }\n\n      // Remember we already ran scripts for this svg.\n      ranScripts[imgUrl] = true\n    }\n\n    // :WORKAROUND: IE doesn't evaluate <style> tags in SVGs that are\n    // dynamically added to the page. This trick will trigger IE to read and use\n    // any existing SVG <style> tags.\n    //\n    // Reference: https://github.com/iconic/SVGInjector/issues/23.\n    const styleTags = svg.querySelectorAll('style')\n    Array.prototype.forEach.call(styleTags, (styleTag: HTMLStyleElement) => {\n      styleTag.textContent += ''\n    })\n\n    svg.setAttribute('xmlns', svgNamespace)\n    svg.setAttribute('xmlns:xlink', xlinkNamespace)\n\n    // Replace the image with the svg.\n    /* istanbul ignore else */\n    if (el.parentNode) {\n      el.parentNode.replaceChild(svg, el)\n    }\n\n    // Now that we no longer need it, drop references to the original element so\n    // it can be GC'd.\n    // TODO: Extract\n    injectedElements.splice(injectedElements.indexOf(el), 1)\n    ;(el as ElementType) = null\n\n    callback(null, svg)\n  })\n}\n\nexport default injectElement\n","import injectElement from './inject-element'\nimport { DoneCallback, Errback, EvalScripts } from './types'\n\ntype Elements = HTMLCollectionOf<Element> | NodeListOf<Element> | Element | null\n\ninterface OptionalArgs {\n  done?: DoneCallback\n  each?: Errback\n  evalScripts?: EvalScripts\n  renumerateIRIElements?: boolean\n}\n\nconst SVGInjector = (\n  elements: Elements,\n  {\n    done = () => undefined,\n    each = () => undefined,\n    evalScripts = EvalScripts.Never,\n    renumerateIRIElements = true\n  }: OptionalArgs = {}\n) => {\n  if (elements && 'length' in elements) {\n    let elementsLoaded = 0\n    for (let i = 0, j = elements.length; i < j; i++) {\n      injectElement(\n        elements[i],\n        (error, svg) => {\n          each(error, svg)\n          if (\n            elements &&\n            'length' in elements &&\n            elements.length === ++elementsLoaded\n          ) {\n            done(elementsLoaded)\n          }\n        },\n        {\n          evalScripts,\n          renumerateIRIElements\n        }\n      )\n    }\n  } else if (elements) {\n    injectElement(\n      elements,\n      (error, svg) => {\n        each(error, svg)\n        done(1)\n        elements = null\n      },\n      {\n        evalScripts,\n        renumerateIRIElements\n      }\n    )\n  } else {\n    done(0)\n  }\n}\n\nexport default SVGInjector\n","// Hat-tip: https://github.com/developit/preact-compat/blob/master/src/index.js#L402.\n\ninterface O {\n  [key: string]: any\n}\n\nconst shallowDiffers = (a: O, b: O) => {\n  for (const i in a) {\n    if (!(i in b)) {\n      return true\n    }\n  }\n\n  for (const i in b) {\n    if (a[i] !== b[i]) {\n      return true\n    }\n  }\n\n  return false\n}\n\nexport default shallowDiffers\n","import { Errback, EvalScripts, SVGInjector } from '@tanem/svg-injector'\nimport * as PropTypes from 'prop-types'\nimport * as React from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport shallowDiffers from './shallow-differs'\n\ntype WrapperType = HTMLSpanElement | HTMLDivElement\n\ninterface Props {\n  evalScripts?: EvalScripts\n  fallback?: React.ReactType\n  loading?: React.ReactType\n  onInjected?: Errback\n  renumerateIRIElements?: boolean\n  src: string\n  svgClassName?: string\n  svgStyle?: React.CSSProperties\n  wrapper?: 'div' | 'span'\n}\n\ninterface State {\n  hasError: boolean\n  isLoading: boolean\n}\n\nexport default class ReactSVG extends React.Component<\n  Props &\n    React.DetailedHTMLProps<React.HTMLAttributes<WrapperType>, WrapperType>,\n  State\n> {\n  static defaultProps = {\n    evalScripts: 'never',\n    fallback: null,\n    loading: null,\n    onInjected: () => undefined,\n    renumerateIRIElements: true,\n    svgClassName: null,\n    svgStyle: {},\n    wrapper: 'div'\n  }\n\n  static propTypes = {\n    evalScripts: PropTypes.oneOf(['always', 'once', 'never']),\n    fallback: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.object,\n      PropTypes.string\n    ]),\n    loading: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.object,\n      PropTypes.string\n    ]),\n    onInjected: PropTypes.func,\n    renumerateIRIElements: PropTypes.bool,\n    src: PropTypes.string.isRequired,\n    svgClassName: PropTypes.string,\n    svgStyle: PropTypes.object,\n    wrapper: PropTypes.oneOf(['div', 'span'])\n  }\n\n  initialState = {\n    hasError: false,\n    isLoading: true\n  }\n\n  state = this.initialState\n\n  // tslint:disable-next-line:variable-name\n  _isMounted = false\n\n  container?: WrapperType | null\n\n  svgWrapper?: WrapperType | null\n\n  refCallback = (container: WrapperType | null) => {\n    this.container = container\n  }\n\n  renderSVG() {\n    if (this.container instanceof Node) {\n      const {\n        evalScripts,\n        renumerateIRIElements,\n        src,\n        svgClassName,\n        svgStyle\n      } = this.props\n      const onInjected = this.props.onInjected!\n      const Wrapper = this.props.wrapper!\n\n      const wrapper = document.createElement(Wrapper)\n      wrapper.innerHTML = ReactDOMServer.renderToStaticMarkup(\n        <Wrapper>\n          <Wrapper className={svgClassName} data-src={src} style={svgStyle} />\n        </Wrapper>\n      )\n\n      this.svgWrapper = this.container.appendChild(\n        wrapper.firstChild as WrapperType\n      )\n\n      const each: Errback = (error, svg) => {\n        if (error) {\n          this.removeSVG()\n        }\n\n        // TODO: It'd be better to cleanly unsubscribe from SVGInjector\n        // callbacks instead of tracking a property like this.\n        if (this._isMounted) {\n          this.setState(\n            () => ({\n              hasError: !!error,\n              isLoading: false\n            }),\n            () => {\n              onInjected(error, svg)\n            }\n          )\n        }\n      }\n\n      SVGInjector(this.svgWrapper.firstChild as WrapperType, {\n        each,\n        evalScripts,\n        renumerateIRIElements\n      })\n    }\n  }\n\n  removeSVG() {\n    if (this.container instanceof Node && this.svgWrapper instanceof Node) {\n      this.container.removeChild(this.svgWrapper)\n      this.svgWrapper = null\n    }\n  }\n\n  componentDidMount() {\n    this._isMounted = true\n    this.renderSVG()\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (shallowDiffers(prevProps, this.props)) {\n      this.setState(\n        () => this.initialState,\n        () => {\n          this.removeSVG()\n          this.renderSVG()\n        }\n      )\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false\n    this.removeSVG()\n  }\n\n  render() {\n    const {\n      evalScripts,\n      fallback: Fallback,\n      loading: Loading,\n      onInjected,\n      renumerateIRIElements,\n      src,\n      svgClassName,\n      svgStyle,\n      wrapper,\n      ...rest\n    } = this.props\n    const Wrapper = wrapper!\n\n    return (\n      <Wrapper {...rest} ref={this.refCallback}>\n        {this.state.isLoading && Loading && <Loading />}\n        {this.state.hasError && Fallback && <Fallback />}\n      </Wrapper>\n    )\n  }\n}\n"],"names":["shallowDiffers","a","b","i","ReactSVG","initialState","hasError","isLoading","state","_isMounted","container","svgWrapper","refCallback","renderSVG","Node","props","evalScripts","renumerateIRIElements","src","svgClassName","svgStyle","onInjected","Wrapper","wrapper","document","createElement","innerHTML","ReactDOMServer","renderToStaticMarkup","React.createElement","appendChild","firstChild","each","error","svg","removeSVG","setState","SVGInjector","removeChild","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","render","Fallback","fallback","Loading","loading","rest","React","defaultProps","undefined","propTypes","PropTypes","isRequired"],"mappings":"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"}